{
  "version": 3,
  "sources": ["../src/utils/constants.ts", "../src/utils/helpers.ts", "../src/game/Model.ts", "../src/game/View.ts", "../src/game/Controller.ts", "../src/index.ts"],
  "sourcesContent": ["import type { WinningCombination } from './types';\r\n\r\nexport const STARTER_PLAYER = 1;\r\n\r\nexport const WINNING_COMBINATIONS: WinningCombination[] = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n", "/**\r\n * @returns An array corresponding to an empty board.\r\n */\r\nexport const getEmptyBoard = () => Array(9).fill(0);\r\n", "import { STARTER_PLAYER, WINNING_COMBINATIONS } from '../utils/constants';\r\nimport { getEmptyBoard } from '../utils/helpers';\r\nimport type { BoardState, Player } from '../utils/types';\r\n\r\nexport class Model {\r\n  public gameActive = true;\r\n  public currentPlayer: Player = STARTER_PLAYER;\r\n  public boardState: BoardState = getEmptyBoard();\r\n\r\n  /**\r\n   * Restarts the game.\r\n   */\r\n  restart() {\r\n    this.boardState = getEmptyBoard();\r\n    this.currentPlayer = STARTER_PLAYER;\r\n    this.gameActive = true;\r\n  }\r\n\r\n  /**\r\n   * Changed the currently active player.\r\n   * @returns The current player.\r\n   */\r\n  changePlayer() {\r\n    this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\r\n    return this.currentPlayer;\r\n  }\r\n\r\n  /**\r\n   * Assigns a sell to a player.\r\n   * @param cellNumber The cell number to select.\r\n   * @returns `true` if all cells have been selected.\r\n   */\r\n  selectCell(cellNumber: number) {\r\n    this.boardState[cellNumber] = this.currentPlayer;\r\n    return this.boardState.every((cell) => cell !== 0);\r\n  }\r\n\r\n  /**\r\n   * Checks if the current player has won the game.\r\n   * @returns The winning combination, if existing.\r\n   */\r\n  checkWinner() {\r\n    const { boardState: selectedCells, currentPlayer } = this;\r\n\r\n    for (const combination of WINNING_COMBINATIONS) {\r\n      let counter = 0;\r\n\r\n      for (const cellIndex of combination) {\r\n        if (selectedCells[cellIndex] === currentPlayer) counter += 1;\r\n      }\r\n\r\n      if (counter !== 3) continue;\r\n\r\n      this.gameActive = false;\r\n      return combination;\r\n    }\r\n  }\r\n}\r\n", "import type { BoardState, Player, WinningCombination } from '../utils/types';\r\n\r\nexport class View {\r\n  public readonly cellsElements: {\r\n    cell: HTMLDivElement;\r\n    trigger: HTMLDivElement;\r\n    marks: Record<Player, HTMLDivElement>;\r\n  }[];\r\n  public readonly restartButton = document.querySelector('#restart') as HTMLAnchorElement;\r\n  public readonly drawTrigger = document.querySelector('#game-draw') as HTMLDivElement;\r\n  public readonly marks = {\r\n    1: document.querySelectorAll<HTMLDivElement>('.mark-1'),\r\n    2: document.querySelectorAll<HTMLDivElement>('.mark-2'),\r\n  };\r\n  public readonly playerTriggers = {\r\n    1: document.querySelector('#trigger-1') as HTMLDivElement,\r\n    2: document.querySelector('#trigger-2') as HTMLDivElement,\r\n  };\r\n  public readonly winTriggers = {\r\n    1: document.querySelector('#game-win-1') as HTMLDivElement,\r\n    2: document.querySelector('#game-win-2') as HTMLDivElement,\r\n  };\r\n\r\n  constructor() {\r\n    const cells = [...document.querySelectorAll<HTMLDivElement>('.cell')];\r\n\r\n    this.cellsElements = cells.map((cell) => ({\r\n      cell,\r\n      trigger: cell.querySelector('.cell-trigger') as HTMLDivElement,\r\n      marks: {\r\n        1: document.querySelector('.mark-1') as HTMLDivElement,\r\n        2: document.querySelector('.mark-2') as HTMLDivElement,\r\n      },\r\n    }));\r\n\r\n    this.playerTriggers[1].click();\r\n\r\n    for (const mark of this.marks[2]) mark.style.display = 'none';\r\n  }\r\n\r\n  /**\r\n   * Restarts the controller.\r\n   * @param currentPlayer\r\n   */\r\n  public restart(currentPlayer: Player) {\r\n    for (const { cell } of this.cellsElements) cell.removeAttribute('style');\r\n\r\n    for (const player of [1, 2] as const) {\r\n      for (const mark of this.marks[player]) {\r\n        mark.removeAttribute('style');\r\n\r\n        if (player === 2) mark.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    if (currentPlayer === 2) {\r\n      for (const trigger of Object.values(this.playerTriggers)) trigger.click();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the marks of the current player.\r\n   * @param currentPlayer\r\n   * @param previousPlayer\r\n   * @param boardState\r\n   */\r\n  public renderMarks(currentPlayer: Player, previousPlayer: Player, boardState: BoardState) {\r\n    boardState.forEach((cellValue, index) => {\r\n      if (cellValue !== 0) return;\r\n\r\n      const { marks } = this.cellsElements[index];\r\n      marks[previousPlayer].style.display = 'none';\r\n      marks[currentPlayer].style.display = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles a clicked cell.\r\n   * @param cell\r\n   * @param currentPlayer\r\n   */\r\n  public handleCellClick(cell: HTMLDivElement, currentPlayer: Player) {\r\n    const cellData = this.cellsElements.find((data) => data.cell === cell);\r\n    if (!cellData) return;\r\n\r\n    cellData.marks[currentPlayer].click();\r\n  }\r\n\r\n  /**\r\n   * Handles when the current player has changed.\r\n   * @param currentPlayer\r\n   */\r\n  public handlePlayerChange(currentPlayer: Player) {\r\n    this.playerTriggers[currentPlayer].click();\r\n  }\r\n\r\n  /**\r\n   * Handles a game draw.\r\n   */\r\n  public handleGameDraw() {\r\n    this.drawTrigger.click();\r\n  }\r\n\r\n  /**\r\n   * Handles a game finish.\r\n   * @param currentPlayer\r\n   * @param winningCombination\r\n   */\r\n  public handleGameFinish(currentPlayer: Player, winningCombination: WinningCombination) {\r\n    for (const { cell } of this.cellsElements) cell.style.pointerEvents = 'none';\r\n\r\n    for (const cellIndex of winningCombination) this.cellsElements[cellIndex].trigger.click();\r\n\r\n    this.winTriggers[currentPlayer].click();\r\n  }\r\n}\r\n", "import { Model } from './Model';\r\nimport { View } from './View';\r\n\r\nexport class Controller {\r\n  private removeCellEventListeners?: () => void;\r\n  private readonly model: Model;\r\n  private readonly view: View;\r\n\r\n  constructor() {\r\n    this.model = new Model();\r\n    this.view = new View();\r\n    this.setEventListeners();\r\n    this.setCellEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners to the UI.\r\n   */\r\n  setEventListeners() {\r\n    this.view.restartButton.addEventListener('click', () => this.restartGame);\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners to the cells.\r\n   */\r\n  setCellEventListeners() {\r\n    const handler = (e: MouseEvent) => {\r\n      const cell = e.currentTarget as HTMLDivElement;\r\n      this.handleCellClick(cell);\r\n    };\r\n\r\n    for (const { cell } of this.view.cellsElements) cell.addEventListener('click', handler, { once: true });\r\n\r\n    this.removeCellEventListeners = () => {\r\n      for (const { cell } of this.view.cellsElements) cell.removeEventListener('click', handler);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handles a clicked cell.\r\n   * @param cell The clicked cell.\r\n   */\r\n  handleCellClick(cell: HTMLDivElement) {\r\n    const cellDataset = cell.dataset.cell;\r\n    if (!cellDataset) return;\r\n\r\n    const { model, view } = this;\r\n    const { boardState } = model;\r\n    const cellIndex = parseInt(cellDataset);\r\n    const allCellsSelected = model.selectCell(cellIndex);\r\n    const winningCombination = model.checkWinner();\r\n\r\n    view.handleCellClick(cell, model.currentPlayer);\r\n\r\n    if (model.gameActive && !allCellsSelected) {\r\n      const previousPlayer = model.currentPlayer;\r\n      const currentPlayer = model.changePlayer();\r\n\r\n      view.handlePlayerChange(previousPlayer);\r\n      view.handlePlayerChange(currentPlayer);\r\n\r\n      view.renderMarks(currentPlayer, previousPlayer, boardState);\r\n\r\n      return;\r\n    }\r\n\r\n    if (model.gameActive && allCellsSelected) {\r\n      view.handleGameDraw();\r\n      return;\r\n    }\r\n\r\n    if (winningCombination) {\r\n      const { currentPlayer } = model;\r\n      view.handleGameFinish(currentPlayer, winningCombination);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restarts the game.\r\n   */\r\n  restartGame() {\r\n    const { view, model } = this;\r\n\r\n    this.removeCellEventListeners?.();\r\n    this.setCellEventListeners();\r\n\r\n    view.restart(model.currentPlayer);\r\n    model.restart();\r\n  }\r\n}\r\n", "import { Controller } from './game/Controller';\r\n\r\nwindow.Webflow = window.Webflow || [];\r\nwindow.Webflow.push(() => {\r\n  new Controller();\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
